#!/bin/bash

# redit script v0.1.8

# Create tmp working directories

mainfolder=".redit"
tempfolder="tmp"
redit_python="redit.py"

# Check if the directory exists
folder_check=$mainfolder
if [ ! -d "$folder_check" ]; then
    mkdir "$folder_check"
fi

check_folder="$mainfolder"/"$tempfolder"
if [ ! -d "$folder_check" ]; then
    mkdir "$folder_check"
fi

if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <remote-file>"
    exit 1
fi

#if [ "$#" -eq 1 ]; then

    # Check if the first argument is equal to "last"
#    if [ "$1" = "last" ]; then

#        echo "Reading lastfile.."

#		last_file=$(head -n 1 "$last_file")
#		remote_file=$(head -n 1 "$last_remote_file")

#		echo ""
#		echo "LOCAL last   file: $last_file"
#		echo "LOCAL remote file: $remote_file"
#		echo ""
        
#        temp_file=$last_file

 #   else
				
		# Store the first argument as a string
		remote_file="$1"

		# Extract the filename using basename and string manipulation
		#remote_filename=$(basename "${remote_file#*:}")

		#temp_file="./$mainfolder/$tempfolder/$remote_filename"

        #echo "Requesting $remote_file ..."
        #echo ""

		# Perform scp command using the arguments
		#scp "$remote_file" "$temp_file"

		# Check the scp command's exit status
		#if [ "$?" -eq 0 ]; then

        #    echo ""
        #    echo "File copied successfully to $temp_file"
        #    echo ""
            #echo "$temp_file" > "$last_file"
            #echo "$remote_file" > "$last_remote_file"
			
		#else

		#	echo "Failed to copy the file."

		#fi

#    fi
#fi

echo "Running redit.py ..."
eval "python3 ~/$mainfolder/$redit_python $remote_file"
echo ""
exit 1

echo "Opening vim $temp_file ..."
echo ""

eval "$editor $temp_file"

# Prompt the user for Yes/No input
echo "EDIT   done"
echo "REMOTE file: $remote_file"
echo ""
read -p "Do you want to UPLOAD the edited file? (yes/no): " reply

# Convert the reply to lowercase
# reply=${reply,,}

# Check the user's response
if [[ "$reply" == "yes" ]]; then
   
	# Ask for source and destination paths
	#read -p "Enter the source file path: " source_path
	#read -p "Enter the destination file path: " destination_path

	# Perform scp command using the paths
	scp "$temp_file" "$remote_file"

	# Check the scp command's exit status
	if [ "$?" -eq 0 ]; then
		echo ""
		echo "File uploaded successfully to $remote_file"
		echo ""
	else
		echo "Failed to upload the file."
		echo "Local copy remains at $temp_file"
		echo ""
	fi
else
	echo "Upload canceled."
fi

